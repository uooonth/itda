import React, { useState, useEffect, useRef } from 'react';
import '../css/nav.css';
import { NavLink, useLocation, useNavigate } from 'react-router-dom';
import smileIcon from '../icons/smile.svg';
import bellIcon from '../icons/bell.svg';
import loginIcon from '../icons/login.svg';
import goProjectIcon from '../icons/goProject.svg';
import closeIcon from '../icons/close.svg';
import alarmIcon from '../icons/alarm.svg';
import chatIcon from '../icons/chat.svg';
import paperIcon from '../icons/paper.svg';
import starIcon from '../icons/star.svg';
import uploadIcon from '../icons/upload.svg';
import timerIcon from '../icons/timer.svg';
import Picker from 'emoji-picker-react';

function Navigation({ isLoggedIn, username }) {
  const location = useLocation();

  const [showProfilePopup, setShowProfilePopup] = useState(false);
  const [showAlarmPopup, setShowAlarmPopup] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [selectedEmoji, setSelectedEmoji] = useState({ emoji: 'ü•∞' });

  // Ïú†Ï†Ä ÏïÑÏù¥Îîî
  const [userProfile, setUserProfile] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const wsAlarmRef = useRef(null);

  function handleEmojiSelect(emojiObject) {
    setSelectedEmoji(emojiObject);
    setShowEmojiPicker(false); // Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù ÌõÑ ÏÑ†ÌÉù Ï∞Ω Îã´Í∏∞
  }
  const toggleProfilePopup = () => setShowProfilePopup(!showProfilePopup);
  const toggleAlarmPopup = () => setShowAlarmPopup(!showAlarmPopup);

  const handleLogout = () => {
    localStorage.removeItem("access_token");
    window.location.href = "/";
  };

  // Ï∞ú ÎßàÍ∞ê ÎÇ®ÏïòÎã§ ÏïåÎûå
  useEffect(() => {
    const fetchPinnedProjects = async () => {
      if (!username) return;

      try {
        // Ï∞úÌïú ÌîÑÎ°úÏ†ùÌä∏ ID Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
        const pinnedRes = await fetch(`http://localhost:8008/users/${username}/pinned-projects`);
        const pinnedData = await pinnedRes.json();
        const pinnedIds = pinnedData.pinned_projects;

        if (!pinnedIds || pinnedIds.length === 0) return;  // Ï∞úÌïú ÌîÑÎ°úÏ†ùÌä∏ ÏóÜÏúºÎ©¥ Ï¢ÖÎ£å

        // Ï†ÑÏ≤¥ ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
        const allProjectsRes = await fetch("http://localhost:8008/getProjects");
        const allProjectsData = await allProjectsRes.json();

        const today = new Date();

        // ÌïòÎ£® ÎÇ®ÏùÄ ÌîÑÎ°úÏ†ùÌä∏ ÌïÑÌÑ∞ÎßÅ
        const upcomingDeadlineProjects = allProjectsData.filter(project => {
          const deadline = new Date(project.sign_deadline);
          const diffDays = Math.ceil((deadline - today) / (1000 * 60 * 60 * 24));
          return pinnedIds.includes(project.project.id) && diffDays === 1;
        });

        // ÏïåÎ¶º Ï∂îÍ∞Ä
        upcomingDeadlineProjects.forEach(project => {
          const notification = {
            id: Date.now() + Math.random(),
            type: "deadline",
            time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
            text: `Ï∞ú Î™©Î°ùÏóê ÏûàÎäî ‚Äò${project.project.name}‚ÄôÏùò Î™®Ïßë ÎßàÍ∞ê Í∏∞ÌïúÏù¥ ÌïòÎ£® ÎÇ®ÏïòÏäµÎãàÎã§!`
          };
          setNotifications(prev => [notification, ...prev]);
        });


      } catch (err) {
        console.error("Ï∞ú ÌîÑÎ°úÏ†ùÌä∏ ÏïåÎ¶º Î°úÎìú Ïã§Ìå®", err);
      }
    };

    fetchPinnedProjects();
  }, [username]);


  // ÌååÏùº ÏóÖÎ°úÎìú ÏïåÎ¶º
  useEffect(() => {
    const fileWs = new WebSocket("ws://localhost:8008/ws/fileupload");

    fileWs.onmessage = (event) => {
      const msg = JSON.parse(event.data);
      console.log("ÌååÏùº ÏïåÎ¶º ÎèÑÏ∞©:", msg);

      let notification = {
        id: Date.now(),
        type: "upload",
        time: new Date(msg.time).toLocaleTimeString([], {
          hour: '2-digit',
          minute: '2-digit'
        }),
        projectName: msg.project_name,
        uploaderName: msg.uploader,
        fileName: msg.file_name,
        text: `ÌîÑÎ°úÏ†ùÌä∏Ïóê ${msg.uploader}ÎãòÏù¥ ÌååÏùºÏùÑ Ïò¨Î†∏ÏäµÎãàÎã§.` //${msg.project_name} Ïù¥Í±∞ Ïç®ÏïºÌïòÎäîÎç∞
      };

      setNotifications(prev => [notification, ...prev]);
    };

    fileWs.onclose = () => console.log("ÌååÏùº WebSocket Ï¢ÖÎ£å");
    fileWs.onerror = (error) => console.error("ÌååÏùº WebSocket Ïò§Î•ò:", error);

    return () => {
      fileWs.close();
    };
  }, []);


  // ÎùºÏù¥Î∏åÏ±ó ÏïåÎ¶º WebSocket Ïó∞Í≤∞
  useEffect(() => {
    // WebSocket Ïó∞Í≤∞ ÏÑ§Ï†ï
    const ws = new WebSocket("ws://localhost:8008/ws/livechat/notification");
    wsAlarmRef.current = ws;

    ws.onmessage = (event) => {
      const msg = JSON.parse(event.data);
      console.log("ÏïåÎ¶º ÎèÑÏ∞©:", msg);

      let notification;

      if (msg.type === "chat") {
        notification = {
          id: Date.now(),
          type: "chat",
          time: new Date(msg.time).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
          }),
          projectName: msg.project_name,
          senderName: msg.sender_name,
          text: `'${msg.project_name}' Ïóê ÏÉàÎ°úÏö¥ Ï±ÑÌåÖÏù¥ ÏûàÏäµÎãàÎã§.`
        };
      }
      else if (msg.type === "upload") {
        notification = {
          id: Date.now(),
          type: "upload",
          time: new Date(msg.time).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
          }),
          projectName: msg.project_name,
          uploaderName: msg.uploader,
          fileName: msg.file_name,
          text: `ÌîÑÎ°úÏ†ùÌä∏Ïóê ${msg.uploader}ÎãòÏù¥ ÏûëÏóÖÎ¨ºÏùÑ ÏóÖÎ°úÎìúÌñàÏäµÎãàÎã§.`
        };
      }

      if (notification) {
        setNotifications(prev => [notification, ...prev]);
      }
    };



    ws.onclose = () => console.log("ÏïåÎ¶º WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å");
    ws.onerror = (error) => console.error("ÏïåÎ¶º WebSocket Ïò§Î•ò:", error);

    return () => {
      if (ws) ws.close();
    };
  }, []);


  /*-------------------------------------------------------------*/
  /*-----------------------     Ïä§ÎßàÏùºÌåù     ---------------------*/
  /*-------------------------------------------------------------*/
  const [userProjects, setUserProjects] = useState([]);
  const [loadingProjects, setLoadingProjects] = useState(false);

  const navigate = useNavigate();
  // ÌîÑÎ°úÏ†ùÌä∏Î°ú Ïù¥ÎèôÌïòÎäî Ìï®Ïàò
  const goToProject = (projectId) => {
    navigate(`/project/${projectId}`);
    setShowProfilePopup(false); // ÌåùÏóÖ Îã´Í∏∞
  };

  // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑÍ≥º ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchAllData = async () => {
      if (!username) return;

      try {
        setLoadingProjects(true);

        // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const [usersResponse, projectsResponse] = await Promise.all([
          fetch(`http://localhost:8008/getUsers`),
          fetch(`http://localhost:8008/users/${username}/projects`) // ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù
        ]);

        const usersData = await usersResponse.json();
        const filteringData = usersData.find(userData => userData.id === username);

        if (filteringData) {
          setUserProfile(filteringData);
        } else {
          console.error('user filtering fail');
          setUserProfile(null);
        }


        // ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        if (projectsResponse.ok) {
          const projectsData = await projectsResponse.json();
          setUserProjects(projectsData);
        } else {
          console.error('ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®');
          setUserProjects([]);
        }

      } catch (error) {
        console.error('Îç∞Ïù¥ÌÑ∞ Ìå®Ïπò Ïã§Ìå®:', error);
        setUserProjects([]);
      } finally {
        setLoadingProjects(false);
      }
    };

    fetchAllData();
  }, [username]);

  console.log("userProjects", userProjects);
  console.log("userProfile", userProfile);
  console.log("loadingProjects", loadingProjects);

  return (
    <div className="navigation">
      <div className="logo">itda</div>
      <div className="navLinks">
        <NavLink to="/home" className={`navLink ${location.pathname === '/home' ? 'active' : ''}`}>Home</NavLink>
        <NavLink to="/project" className={`navLink ${location.pathname === '/project' ? 'active' : ''}`}>Project</NavLink>
        <NavLink to="/profile" className={`navLink ${location.pathname === '/profile' ? 'active' : ''}`}>Profile</NavLink>
      </div>
      {isLoggedIn ? (
        <div className="userSection">
          <div className="userName">{userProfile?.name}Îãò</div>
          <img src={smileIcon} alt="Smile" className="icon" onClick={toggleProfilePopup} />
          <img src={bellIcon} alt="Bell" className="icon" onClick={toggleAlarmPopup} />

          {showProfilePopup && (
            <div className="popup profilePopup">
              <span className="close">
                <img src={closeIcon} alt="close" className="icon" onClick={toggleProfilePopup} />
              </span>
              <div className="section">
                <span className="popupUserName userName" onClick={() => setShowEmojiPicker(!showEmojiPicker)}>
                  {userProfile?.name}Îãò {selectedEmoji.emoji}
                </span>
                {showEmojiPicker && <Picker onEmojiClick={handleEmojiSelect} />}
              </div>

              <div className="section">
                <div className="content-nav">
                  <span className="email">
                    {userProfile?.email || 'email@example.com'}
                  </span>
                  <span className="profileSettings">ÏÑ§Ï†ï</span>
                </div>
              </div>

              <div className="divider"></div>

              <div className="section">
                <div className="title">Ï∞∏Ïó¨Ï§ëÏù∏ ÌîÑÎ°úÏ†ùÌä∏</div>
                {loadingProjects ? (
                  <div className="content">
                    <span style={{ color: '#999', fontSize: '14px' }}>Î°úÎî© Ï§ë...</span>
                  </div>
                ) : userProjects.length > 0 ? (
                  <div className="projects-list">
                    {userProjects.map((project, index) => (
                      <div key={project.id || index} className="content" style={{
                        marginBottom: '8px',
                        cursor: 'pointer',
                        padding: '4px 0',
                        borderRadius: '4px',
                        transition: 'background-color 0.2s'
                      }}
                        onMouseEnter={(e) => e.target.style.backgroundColor = '#f5f5f5'}
                        onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                        onClick={() => goToProject(project.project.project.id)}
                      >
                        <span style={{ flex: 1 }}>
                          {project.project.project.name || 'ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶Ñ ÏóÜÏùå'}
                        </span>
                        <img src={goProjectIcon} alt="goProject" className="icon" />
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="content">
                    <span style={{ color: '#999', fontSize: '14px' }}>
                      Ï∞∏Ïó¨ Ï§ëÏù∏ ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§
                    </span>
                  </div>
                )}
              </div>

              <div className="divider"></div>
              <div className="logout" onClick={handleLogout}>Î°úÍ∑∏ÏïÑÏõÉ</div>
            </div>
          )}

          {/* ÏïåÎ¶º ÌåùÏóÖ */}
          {showAlarmPopup && (
            <div className="popup alarmPopup">
              <span className="close">
                <img src={closeIcon} alt="close" className="icon" onClick={toggleAlarmPopup} />
              </span>
              <div className="section">
                <span className="popupUserName userName">ÏïåÎ¶º</span>
              </div>

              {/* ÏïåÎ¶º */}
              {notifications.map((notification, index) => (
                <div key={notification.id}>
                  <div className="notification">
                    <div className="toptext">
                      {notification.type === "chat" ? (
                        <img src={chatIcon} alt="chat" className="icon" />
                      ) : notification.type === "upload" ? (
                        <img src={uploadIcon} alt="upload" className="icon" />
                      ) : (
                        <img src={starIcon} alt="star" className="icon" />
                      )}
                      <div className="title">ÌîÑÎ°úÏ†ùÌä∏ ÏïåÎ¶º</div>
                    </div>
                    <div className="time">{notification.time}</div>
                  </div>
                  <div className='bottomtext'>
                    <div className="content-alam">{notification.text}</div>
                  </div>
                  <div className="divider"></div>
                </div>
              ))}

              <div className="notification">
                <div className="toptext">
                  <img src={starIcon} alt="star" className="icon" />
                  <div className="title">ÌîÑÎ°úÏ†ùÌä∏ ÏïåÎ¶º</div>
                </div>
                <div className="time">Î∞©Í∏à Ï†Ñ</div>
              </div>
              <div className='bottomtext'>
                <div className="content-alam">Ï∞ú Î™©Î°ùÏóê ÏûàÎäî ‚ÄòÏòÅÏÉÅÏ∞çÍ∏∞Ï†ÑÏàòÏ†ïÌï¥Ï£ºÏÑ∏Ïöî‚ÄôÏùò Î™®Ïßë ÎßàÍ∞ê Í∏∞ÌïúÏù¥ ÌïòÎ£® ÎÇ®ÏïòÏäµÎãàÎã§!</div>
              </div>
              <div className="divider"></div>

              {/* ÏïåÎ¶ºÏù¥ ÏóÜÏùÑ Îïå */}
              {notifications.length === 0 && (
                <div>
                  <div className="notification">
                    <div className="toptext">
                      <img src={alarmIcon} alt="alarm" className="icon" />
                      <div className="title">ÏïåÎ¶º ÏóÜÏùå</div>
                    </div>
                    <div className="time">-</div>
                  </div>
                  <div className='bottomtext'>
                    <div className="content-alam">ÏÉàÎ°úÏö¥ ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.</div>
                  </div>
                  <div className="divider"></div>
                </div>
              )}
            </div>
          )}
        </div>
      ) : (
        <div className="authSection">
          <NavLink to="/signupAgreement" className="signUp">
            ÌöåÏõêÍ∞ÄÏûÖ
          </NavLink>
          <NavLink to="/login" className="navLink">
            <button className="loginButton">
              Î°úÍ∑∏Ïù∏
              <img src={loginIcon} alt="login" className="icon" />
            </button>
          </NavLink>
        </div>
      )}
    </div>
  );
}

export default Navigation;
